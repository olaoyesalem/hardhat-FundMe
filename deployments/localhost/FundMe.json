{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_notOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x870e762353995d38741b7bd73dd4a61ca5f2ae290149ffe6506df1f32320867c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1066911",
    "logsBloom": "0x
    "blockHash": "0x171def270d5f416a39412a39dc8e361af7227db186c2fb477ebf949dce77f295",
    "transactionHash": "0x870e762353995d38741b7bd73dd4a61ca5f2ae290149ffe6506df1f32320867c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1066911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "4c68736fe7bf1d0c52f69641a34daab8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_notOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Olaoye Salem\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nerror FundMe_notOwner();\\nerror FundMe_sendFailed();\\n\\n// if a variable is set one time to a particular value,  we use the keyword \\\"constant\\\", \\\" Immutable\\\";\\n// the variables constants no longer take up a storage spot rather they are inducted into the byte code of the smart contract\\n/**\\n @title A contract for crowd funding\\n @author Olaoye Salem\\n @notice This contract is to demo a sample funding contract\\n @dev This implements price feeds as our library\\n */\\ncontract FundMe{\\n    using PriceConverter for uint256;\\n\\nuint256 public constant MINIMUM_USD = 50*1e18; \\nAggregatorV3Interface private s_priceFeed;\\naddress[] private s_funders; // to keep list of s_funders\\nmapping(address=>uint256) private s_addressToAmountFunded; // to map s_funders to the amount deposited\\naddress private immutable i_owner;\\n\\nconstructor(address s_priceFeedAddress){  // constructor is a function that gets automatically called up once the contract is deployed.\\n  i_owner=msg.sender;   \\n  s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n}\\n\\nmodifier onlyOwner{\\n         if(msg.sender !=i_owner){\\n    revert FundMe_notOwner();\\n}\\n    _;\\n}\\n\\n\\n\\nfunction fund() public payable onlyOwner {\\n\\nrequire(msg.value.getConversionRate( s_priceFeed)>=MINIMUM_USD,\\\"Didn't send enough\\\");  \\ns_addressToAmountFunded [msg.sender]+=msg.value;// mapping the addrsses to the  amount they funded\\ns_funders.push(msg.sender);\\n}\\n\\nfunction Withdraw() public onlyOwner {\\n\\n    for(uint256 s_fundersIndex=0; s_fundersIndex<s_funders.length; s_fundersIndex++){\\naddress funder = s_funders[s_fundersIndex];\\ns_addressToAmountFunded[funder]=0; \\n }\\n\\ns_funders = new address[](0);\\n//payable(msg.sender).transfer(address(this).balance);\\n\\n// send\\n// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n// if(!sendSuccess){\\n//     revert sendFailed();\\n// }\\n// call\\n// this is a lower level command; it can be used to call functions wvwn without having thier ABI\\n\\n(bool callSuccess, )=payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\nrequire(callSuccess,\\\"call Failed\\\");\\n\\n\\n \\n}\\n\\nfunction cheaperWithdraw() public onlyOwner{\\n    address[] memory funders= s_funders; // Saving an array to memory saves gas\\n\\nfor(uint256 fundersIndex=0; fundersIndex<funders.length; fundersIndex++){\\naddress funder = funders[fundersIndex];\\ns_addressToAmountFunded[funder]=0; \\n }\\n\\ns_funders = new address[](0);\\n\\n(bool callSuccess, )=payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\nrequire(callSuccess,\\\"call Failed\\\");\\n}\\n\\nreceive() external payable{\\n    fund();\\n}\\n\\n// fallback\\nfallback() external payable{\\n    fund();\\n} \\n\\n    function getOwner() public view returns(address) {\\n    return i_owner;\\n}\\nfunction getFunders(uint256 _index) public view returns(address){\\n        return s_funders[_index];\\n}\\n\\nfunction getAddressToAmountFunded(address _funder) public view returns(uint256){\\n    return s_addressToAmountFunded[_funder];\\n}\\nfunction getPriceFeed() public view returns(AggregatorV3Interface){\\n    return s_priceFeed;\\n}\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x6b5641cbd91879cad7ea3efdeaa02c8b8a663ba8e1dbe327904bdd8cead478a2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.0;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter{\\nfunction getPrice(AggregatorV3Interface priceFeed)internal view returns(uint256){\\n  \\n    //AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n    (,int256 price,,,)=priceFeed.latestRoundData();\\n     //This is the price of ETH in USD \\n    // $1,280.00000000 = 1eth // this has 8 decimal place\\n    return uint256(price*1e10);\\n}\\nfunction getVersion(AggregatorV3Interface priceFeed) internal view returns(uint256){\\n    //AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n    return priceFeed.version();\\n}\\nfunction getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)internal view returns(uint256){// to get the amount of any ETH in USD\\nuint256 ethPrice= getPrice( priceFeed);\\n//3000_000000000000000000 = ETH/USD price\\n// 1_000000000000000000 (wei) ETH we are sending\\n uint256 ethPriceInUsd = (ethPrice * ethAmount)/1e18;\\n //3000 USD\\nreturn ethPriceInUsd;\\n}\\n\\n}\",\"keccak256\":\"0x2cdcd74411b953fdfec91fe2898c9179608277da8a6d4d292004f82ffc1a907b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001377380380620013778339818101604052810190620000379190620000cc565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600081519050620000c68162000137565b92915050565b600060208284031215620000e557620000e462000132565b5b6000620000f584828501620000b5565b91505092915050565b60006200010b8262000112565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014281620000fe565b81146200014e57600080fd5b50565b60805160601c6111f262000185600039600081816101cd0152818161041c0152818161066c01526106bb01526111f26000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101545780639e87a5cd1461017f578063b60d4288146101aa578063be2693f0146101b45761008e565b80630343fb25146100985780633a7b6c74146100d557806357ea89b6146101125780636b69a592146101295761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610b4a565b610389565b6040516100cc9190610d40565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b77565b6103d2565b6040516101099190610cca565b60405180910390f35b34801561011e57600080fd5b5061012761041a565b005b34801561013557600080fd5b5061013e61065b565b60405161014b9190610d40565b60405180910390f35b34801561016057600080fd5b50610169610668565b6040516101769190610cca565b60405180910390f35b34801561018b57600080fd5b50610194610690565b6040516101a19190610ce5565b60405180910390f35b6101b26101cb565b005b3480156101c057600080fd5b506101c96106b9565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610250576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6802b5e3af16b188000061028d60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095e90919063ffffffff16565b10156102ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c590610d00565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461031d9190610d77565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600182815481106103e8576103e76110a8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049f576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561054b576000600182815481106104c5576104c46110a8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054390611001565b9150506104a2565b50600067ffffffffffffffff811115610567576105666110d7565b5b6040519080825280602002602001820160405280156105955781602001602082028036833780820191505090505b50600190805190602001906105ab929190610a3a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d290610cb5565b60006040518083038185875af1925050503d806000811461060f576040519150601f19603f3d011682016040523d82523d6000602084013e610614565b606091505b5050905080610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90610d20565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073e576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610778575b5050505050905060005b815181101561084d5760008282815181106107ea576107e96110a8565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084590611001565b9150506107cc565b50600067ffffffffffffffff811115610869576108686110d7565b5b6040519080825280602002602001820160405280156108975781602001602082028036833780820191505090505b50600190805190602001906108ad929190610a3a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108d490610cb5565b60006040518083038185875af1925050503d8060008114610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b505090508061095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190610d20565b60405180910390fd5b5050565b60008061096a8361099a565b90506000670de0b6b3a764000085836109839190610f15565b61098d9190610dcd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109e357600080fd5b505afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190610ba4565b5050509150506402540be40081610a329190610dfe565b915050919050565b828054828255906000526020600020908101928215610ab3579160200282015b82811115610ab25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a5a565b5b509050610ac09190610ac4565b5090565b5b80821115610add576000816000905550600101610ac5565b5090565b600081359050610af081611160565b92915050565b600081519050610b0581611177565b92915050565b600081359050610b1a8161118e565b92915050565b600081519050610b2f8161118e565b92915050565b600081519050610b44816111a5565b92915050565b600060208284031215610b6057610b5f611106565b5b6000610b6e84828501610ae1565b91505092915050565b600060208284031215610b8d57610b8c611106565b5b6000610b9b84828501610b0b565b91505092915050565b600080600080600060a08688031215610bc057610bbf611106565b5b6000610bce88828901610b35565b9550506020610bdf88828901610af6565b9450506040610bf088828901610b20565b9350506060610c0188828901610b20565b9250506080610c1288828901610b35565b9150509295509295909350565b610c2881610f6f565b82525050565b610c3781610fcb565b82525050565b6000610c4a601283610d66565b9150610c558261110b565b602082019050919050565b6000610c6d600b83610d66565b9150610c7882611134565b602082019050919050565b6000610c90600083610d5b565b9150610c9b8261115d565b600082019050919050565b610caf81610fab565b82525050565b6000610cc082610c83565b9150819050919050565b6000602082019050610cdf6000830184610c1f565b92915050565b6000602082019050610cfa6000830184610c2e565b92915050565b60006020820190508181036000830152610d1981610c3d565b9050919050565b60006020820190508181036000830152610d3981610c60565b9050919050565b6000602082019050610d556000830184610ca6565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d8282610fab565b9150610d8d83610fab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc257610dc161104a565b5b828201905092915050565b6000610dd882610fab565b9150610de383610fab565b925082610df357610df2611079565b5b828204905092915050565b6000610e0982610f81565b9150610e1483610f81565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e5357610e5261104a565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e9057610e8f61104a565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ecd57610ecc61104a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0a57610f0961104a565b5b828202905092915050565b6000610f2082610fab565b9150610f2b83610fab565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6457610f6361104a565b5b828202905092915050565b6000610f7a82610f8b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fd682610fdd565b9050919050565b6000610fe882610fef565b9050919050565b6000610ffa82610f8b565b9050919050565b600061100c82610fab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561103f5761103e61104a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b50565b61116981610f6f565b811461117457600080fd5b50565b61118081610f81565b811461118b57600080fd5b50565b61119781610fab565b81146111a257600080fd5b50565b6111ae81610fb5565b81146111b957600080fd5b5056fea2646970667358221220d406c3c7fda81d3aa386762a5b2affe5b40bd324551e26eec4d075d62590020464736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101545780639e87a5cd1461017f578063b60d4288146101aa578063be2693f0146101b45761008e565b80630343fb25146100985780633a7b6c74146100d557806357ea89b6146101125780636b69a592146101295761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610b4a565b610389565b6040516100cc9190610d40565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b77565b6103d2565b6040516101099190610cca565b60405180910390f35b34801561011e57600080fd5b5061012761041a565b005b34801561013557600080fd5b5061013e61065b565b60405161014b9190610d40565b60405180910390f35b34801561016057600080fd5b50610169610668565b6040516101769190610cca565b60405180910390f35b34801561018b57600080fd5b50610194610690565b6040516101a19190610ce5565b60405180910390f35b6101b26101cb565b005b3480156101c057600080fd5b506101c96106b9565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610250576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6802b5e3af16b188000061028d60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095e90919063ffffffff16565b10156102ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c590610d00565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461031d9190610d77565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600182815481106103e8576103e76110a8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049f576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561054b576000600182815481106104c5576104c46110a8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054390611001565b9150506104a2565b50600067ffffffffffffffff811115610567576105666110d7565b5b6040519080825280602002602001820160405280156105955781602001602082028036833780820191505090505b50600190805190602001906105ab929190610a3a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d290610cb5565b60006040518083038185875af1925050503d806000811461060f576040519150601f19603f3d011682016040523d82523d6000602084013e610614565b606091505b5050905080610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90610d20565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073e576040517fd72551ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610778575b5050505050905060005b815181101561084d5760008282815181106107ea576107e96110a8565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084590611001565b9150506107cc565b50600067ffffffffffffffff811115610869576108686110d7565b5b6040519080825280602002602001820160405280156108975781602001602082028036833780820191505090505b50600190805190602001906108ad929190610a3a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108d490610cb5565b60006040518083038185875af1925050503d8060008114610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b505090508061095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190610d20565b60405180910390fd5b5050565b60008061096a8361099a565b90506000670de0b6b3a764000085836109839190610f15565b61098d9190610dcd565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109e357600080fd5b505afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190610ba4565b5050509150506402540be40081610a329190610dfe565b915050919050565b828054828255906000526020600020908101928215610ab3579160200282015b82811115610ab25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a5a565b5b509050610ac09190610ac4565b5090565b5b80821115610add576000816000905550600101610ac5565b5090565b600081359050610af081611160565b92915050565b600081519050610b0581611177565b92915050565b600081359050610b1a8161118e565b92915050565b600081519050610b2f8161118e565b92915050565b600081519050610b44816111a5565b92915050565b600060208284031215610b6057610b5f611106565b5b6000610b6e84828501610ae1565b91505092915050565b600060208284031215610b8d57610b8c611106565b5b6000610b9b84828501610b0b565b91505092915050565b600080600080600060a08688031215610bc057610bbf611106565b5b6000610bce88828901610b35565b9550506020610bdf88828901610af6565b9450506040610bf088828901610b20565b9350506060610c0188828901610b20565b9250506080610c1288828901610b35565b9150509295509295909350565b610c2881610f6f565b82525050565b610c3781610fcb565b82525050565b6000610c4a601283610d66565b9150610c558261110b565b602082019050919050565b6000610c6d600b83610d66565b9150610c7882611134565b602082019050919050565b6000610c90600083610d5b565b9150610c9b8261115d565b600082019050919050565b610caf81610fab565b82525050565b6000610cc082610c83565b9150819050919050565b6000602082019050610cdf6000830184610c1f565b92915050565b6000602082019050610cfa6000830184610c2e565b92915050565b60006020820190508181036000830152610d1981610c3d565b9050919050565b60006020820190508181036000830152610d3981610c60565b9050919050565b6000602082019050610d556000830184610ca6565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d8282610fab565b9150610d8d83610fab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dc257610dc161104a565b5b828201905092915050565b6000610dd882610fab565b9150610de383610fab565b925082610df357610df2611079565b5b828204905092915050565b6000610e0982610f81565b9150610e1483610f81565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e5357610e5261104a565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e9057610e8f61104a565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ecd57610ecc61104a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f0a57610f0961104a565b5b828202905092915050565b6000610f2082610fab565b9150610f2b83610fab565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6457610f6361104a565b5b828202905092915050565b6000610f7a82610f8b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fd682610fdd565b9050919050565b6000610fe882610fef565b9050919050565b6000610ffa82610f8b565b9050919050565b600061100c82610fab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561103f5761103e61104a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b7f63616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b50565b61116981610f6f565b811461117457600080fd5b50565b61118081610f81565b811461118b57600080fd5b50565b61119781610fab565b81146111a257600080fd5b50565b6111ae81610fb5565b81146111b957600080fd5b5056fea2646970667358221220d406c3c7fda81d3aa386762a5b2affe5b40bd324551e26eec4d075d62590020464736f6c63430008070033",
  "devdoc": {
    "author": "Olaoye Salem",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}